# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It8nMnr1gVRoVhOxveExQ8-HYHcErXpd
"""

import numpy as np
import matplotlib.pyplot as plt
import math

# Function to calculate nCr
def nCr(n,r):
    f = math.factorial
    return f(n) / f(r) / f(n-r)

# no of simulations
simlen = int(1e5)
# Initializing no. of rejections to 0
count =0 
# looping simlen times 
for item in range(simlen): 
    # Generating outcomes for 100 bulbs 
    y = np.random.randint(1,101, size=(1, 4))
    flag=0
    # Bulb no. 1,2,3,4 and 5 are assumed to be defective
    # Checking if the bulb is defective
    for i in range(4): 
      for j in range(1,6):  
        # If bulb is defective no. of rejections increases 
        if y[0][i]==j :
            count+=1
            flag=1
            break
        if flag==1:
          break    
          
# Calculating simulated probability
simulated_prob_X_0 = count/simlen
simulated_prob_X_1 = 1- simulated_prob_X_0

# Calculating theoretical probability
# prob of non defective bulb
p=19/20 
prob_X_1 = nCr(4,4)*(p**4)
prob_X_0 = 1- prob_X_1

simulated_prob = [simulated_prob_X_0 , simulated_prob_X_1 , 0]
theoretical_prob =[prob_X_0, prob_X_1, 0]
 
# Plotting
X = np.arange(3)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
plt.xlabel('Random Variable, X')
plt.ylabel('Probability, $P_{r}(X)$')
ax.bar(X - 0.125, simulated_prob, color = 'b', width = 0.25)
ax.bar(X + 0.125, theoretical_prob, color = 'r', width = 0.25)
ax.legend(labels=['Simulation', 'Analysis'])
plt.grid()

# Theory vs Simulation
print("The simulated probability is", simulated_prob_X_1)
print("The theoretical probability is", prob_X_1)

print("Therefore, the probabilities are approximately equal in theory and simulation.")