# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It8nMnr1gVRoVhOxveExQ8-HYHcErXpd
"""

import numpy as np
import matplotlib.pyplot as plt

# no of simulations
simlen = int(1e5)

# Number of sixes in throws
count_A =0 
count_B= 0

# looping simlen times 
k = np.random.randint(1,7)

for item in range(simlen):    
    while True:
      # Number that appears for A on dice
      num_A = np.random.randint(1,7)
      if num_A==6 :
         count_A+=1
         break
      # Number that appears for B on dice   
      num_B =np.random.randint(1,7)
      if num_B==6 :
         count_B+=1
         break

# Simulated Probability of rv X = 1         
sim_prob_X_1 = count_B/simlen
# Simulated Probability of rv X = 0
sim_prob_X_0 = count_A/simlen

# Theoretical Probability of rv X = 1
prob_X_1=  5/11
# Theoretical Probability of rv X = 0
prob_X_0=  1 -prob_X_1

#Theory vs simulation
print("The simulated prob for X=1 is",sim_prob_X_1)
print("The theoretical prob for x=1 is",prob_X_1)

# Plotting
sim_list= [sim_prob_X_0,sim_prob_X_1,0,0]
theory_list=[prob_X_0,prob_X_1,0,0]
X = np.arange(4)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
plt.xlabel('Random variable, X')
plt.ylabel('Probability, $P_{r}(X)$')
ax.bar(X + 0.125, sim_list, color = 'b', width = 0.25)
ax.bar(X - 0.125, theory_list, color = 'r', width = 0.25)
ax.legend(labels=['Simulation', 'Analysis'])
plt.grid()
plt.show()

# Plotting geometric distribution 
# Probability of getting a six
prob_success= 1/6
prob_failure = 1- prob_success
p=prob_success
x = np.arange(1, 16, 1)
y = p*(1-p)**(2*x-1)
plt.plot(x, y,'b')
plt.xlabel('No. of turns , N')
plt.ylabel('Probability')

# function to show the plot
plt.grid()
plt.show()