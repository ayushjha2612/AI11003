# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It8nMnr1gVRoVhOxveExQ8-HYHcErXpd
"""

import numpy as np
import matplotlib.pyplot as plt
# no of simulations
simlen = 10000
no_of_throws =3

# initializing no of doublets in each simulation to zero
count_0=0
count_1=0
count_2=0
count_3=0

# looping 10000 times 
for item in range(simlen): 
    count =0 
    # Generating outcomes for 3 throws of pair of dice 
    y = np.random.randint(1,7, size=(2, no_of_throws))
    # Finding doublet
    for i in range(3) :
        if y[0][i]==y[1][i] :
            count+=1
    # Counting the no. of doublets        
    if count ==0:
      count_0+=1
    elif count==1:  
      count_1+=1
    elif count==2:  
      count_2+=1
    elif count==3:  
      count_3+=1  

# Calculating simulated probability
simulated_prob = [count_0/simlen, count_1/simlen, count_2/simlen, count_3/simlen]

# Calculating theoretical probability
prob_doublet =1/6
prob_no_doublet = 1- prob_doublet

# pd as probability of getting a doublet
pd = prob_doublet
pnd = prob_no_doublet
# X is rv , same as count in simulation
pr_X_0 = pnd*pnd*pnd
pr_X_1 = 3*pd*pnd*pnd
pr_X_2 = 3*pd*pd*pnd
pr_X_3 = pd*pd*pd

theoretical_prob =[pr_X_0, pr_X_1, pr_X_2, pr_X_3]
 
# plotting
X = np.arange(4)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
plt.xlabel('No. of doublets, X')
plt.ylabel('Probability, $P_{r}(X)$')
ax.bar(X - 0.125, simulated_prob, color = 'b', width = 0.25)
ax.bar(X + 0.125, theoretical_prob, color = 'r', width = 0.25)
plt.title('Probability distribution')
ax.legend(labels=['Simulation', 'Analysis'])
plt.grid()

# Theory vs Simulation

print("As seen from the graph the probabilities are approximately equal in theory and simulation")